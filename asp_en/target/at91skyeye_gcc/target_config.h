/*
 *  TOPPERS/ASP Kernel
 *      Toyohashi Open Platform for Embedded Real-Time Systems/
 *      Advanced Standard Profile Kernel
 * 
 *  Copyright (C) 2006 by GJ Business Division RICOH COMPANY,LTD. JAPAN
 *  Copyright (C) 2007-2011 by Embedded and Real-Time Systems Laboratory
 *              Graduate School of Information Science, Nagoya Univ., JAPAN
 * 
 *	The above copyright holders grant permission gratis to use,
 *	duplicate, modify, or redistribute (hereafter called use) this
 *	software (including the one made by modifying this software),
 *	provided that the following four conditions (1) through (4) are
 *	satisfied.
 *
 *	(1) When this software is used in the form of source code, the above
 *    	copyright notice, this use conditions, and the disclaimer shown
 *    	below must be retained in the source code without modification.
 *
 *	(2) When this software is redistributed in the forms usable for the
 *    	development of other software, such as in library form, the above
 *    	copyright notice, this use conditions, and the disclaimer shown
 *    	below must be shown without modification in the document provided
 *    	with the redistributed software, such as the user manual.
 *
 *	(3) When this software is redistributed in the forms unusable for the
 *    	development of other software, such as the case when the software
 *    	is embedded in a piece of equipment, either of the following two
 *   	 conditions must be satisfied:
 *
 *  	(a) The above copyright notice, this use conditions, and the
 *         	disclaimer shown below must be shown without modification in
 *     		the document provided with the redistributed software, such as
 *      	the user manual.
 *
 * 		(b) How the software is to be redistributed must be reported to the
 *     		TOPPERS Project according to the procedure described
 *     		separately.
 *
 *	(4) The above copyright holders and the TOPPERS Project are exempt
 *    	from responsibility for any type of damage directly or indirectly
 *   	caused from the use of this software and are indemnified by any
 *    	users or end users of this software from any and all causes of
 *    	action whatsoever.
 *
 *	THIS SOFTWARE IS PROVIDED "AS IS." THE ABOVE COPYRIGHT HOLDERS AND
 *	THE TOPPERS PROJECT DISCLAIM ANY EXPRESS OR IMPLIED WARRANTIES,
 *	INCLUDING, BUT NOT LIMITED TO, ITS APPLICABILITY TO A PARTICULAR
 *	PURPOSE. IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS AND THE
 *	TOPPERS PROJECT BE LIABLE FOR ANY TYPE OF DAMAGE DIRECTLY OR
 *	INDIRECTLY CAUSED FROM THE USE OF THIS SOFTWARE.
 * 
 *  @(#) $Id: target_config.h 2036 2011-03-03 15:11:14Z ertl-honda $
 */

/*
 *  chip dependent module (for AT91SKYEYE)
 *
 *  the include file of the chip dependent part of the kernel.
 */

#ifndef TOPPERS_TARGET_CONFIG_H
#define TOPPERS_TARGET_CONFIG_H

/*
 *  chip hardware resource definition
 */
#include "at91skyeye.h"
 
/*
 *  trace log related definition
 */
#ifdef TOPPERS_ENABLE_TRACE
#include "logtrace/trace_config.h"
#endif /* TOPPERS_ENABLE_TRACE */

/*
 *  the supported SkyEye and Device Manager version
 */
#define SUPPORT_SKYEYE_VER  0x1024
#define SUPPORT_DEVM_VER    0x2020

/*
 *  whether there are vector routines in the kernel.
 */
#define VECTOR_KERNEL

/*
 *  the start address of vector if there are no vector 
 *  routines in the kernel.
 */ 
#define VECTOR_START  0x00

/*
 *  no initialization of data section
 */
#define TOPPERS_OMIT_DATA_INIT

/*
 * the instruction to wait interrupts
 */
#define ASM_TARGET_WAIT_INTERRUPT nop

/*
 *  default size of non-task context stack
 */
#define DEFAULT_ISTKSZ      0x1000U   /* 4KB */
                                                   
/*
 *  definitions about slight delay (maybe in the target dependent part
 *  of SIL)
 */
#define SIL_DLY_TIM1    20
#define SIL_DLY_TIM2    10

/*
 *  definitions about interrupt handler no.
 */ 
#define TMIN_INHNO 0U
#define TMAX_INHNO 31U
#define TNUM_INH   32U

/*
 *  definitions about interrupt no.
 */ 
#define TMIN_INTNO 0U
#define TMAX_INTNO 31U
#define TNUM_INT   32U

#ifndef TOPPERS_MACRO_ONLY

/*
 *  check whether the intno is valid
 *
 */
#define VALID_INTNO(intno) (TMIN_INTNO <= (intno) && (intno) <= TMAX_INTNO)
#define VALID_INTNO_DISINT(intno)	VALID_INTNO(intno)
#define VALID_INTNO_CFGINT(intno)	VALID_INTNO(intno)
#define VALID_INTNO_ATTISR(intno)   VALID_INTNO(intno)

/*
 *  the interrupt handler table
 *  generated by the configurator
 */
extern const FP inh_tbl[TNUM_INH];

/*
 *  define interrupt handler
 */
Inline void
x_define_inh(INHNO inhno, FP int_entry)
{
}

/*
 *  to generate the entry of interrupt handler
 *
 */
#define INT_ENTRY(inhno, inthdr)    inthdr
#define INTHDR_ENTRY(inhno, inhno_num, inthdr) extern void inthdr(void);

/*
 *  implementation of TOPPERS standard interrupt model
 */

/*
 * the disable status of all interrupts
 */
extern uint32_t idf;

/*
 *  operations of interrupt priority mask
 *
 *  AT91SAM7Sは割込み優先度マスクをIRC内でハードウェア的に持つが，
 *  ソフトウェア側から値を読み書きできないため，割込み要求禁止フラ
 *  グにより割込み優先度マスクを実現する
 */

/*
 *  現在の割込み優先度マスクの値
 */
extern PRI ipm;

/*
 *  割込み優先度マスク毎にセットする，割込み要求禁止フラグの値
 *  のテーブル
 */
extern const uint32_t ipm_mask_tbl[8];

#endif /* TOPPERS_MACRO_ONLY */  

/*
 *  IPMをimp_mask_tblのインデックスに変換するマクロ
 */
#define INDEX_IPM(ipm)  (-(ipm))

#ifndef TOPPERS_MACRO_ONLY

/*
 *  (モデル上の)割込み優先度マスクの設定
 * 
 *  指定された優先度に設定された割込み要求禁止フラグのテーブルの値と（モデ
 *  ル上の）各割込みの割込み要求禁止フラグの状態を保持した変数の値との
 *  ORをIRCの割込み要求禁止フラグにセットし，設定した優先度を内部変数
 *  ipmに保存する．
 */
Inline void
x_set_ipm(PRI intpri)
{
    uint32_t ipm_mask = ipm_mask_tbl[INDEX_IPM(intpri)];

    /*
     *  AT91SAM7Sの割込みコントローラはイネーブルレジスタと
     *  クリアーレジスタがあるため，一旦全ての割込みを禁止してから，
     *  特定の割込みのみ許可する必要がある
     */
    /* 全割込み禁止 */
    at91skyeye_disable_int(~0U);

    /* マスク指定されていない割込みのみ許可 */
    at91skyeye_enable_int(~(ipm_mask|idf));

    ipm = intpri;
}

#define t_set_ipm(intpri) x_set_ipm(intpri)
#define i_set_ipm(intpri) x_set_ipm(intpri)

/*
 *  refer the current interrupt priority mask value
 *
 *  return ipm
 */
Inline PRI
x_get_ipm(void)
{
    return(ipm);
}

#define t_get_ipm() x_get_ipm()
#define i_get_ipm() x_get_ipm()

/*
 *  割込み属性が設定されているかを判別するための変数
 */
extern uint32_t	bitpat_cfgint;

/*
 * （モデル上の）割込み要求禁止フラグのセット
 *
 *  指定された，割込み番号の割込み要求禁止フラグのセットして，割込みを
 *  禁止する．また，（モデル上の）割込み要求禁止フラグを管理するidfの対
 *  応するビットををセットする．
 *  割込み要求をマスクする機能をサポートしていない場合には，falseを返す
 */


Inline bool_t
x_disable_int(INTNO intno)
{
    if ((bitpat_cfgint & INTNO_BITPAT(intno)) == 0U) {
        return(false);
    }
    at91skyeye_disable_int(INTNO_BITPAT(intno));
    idf |= INTNO_BITPAT(intno);
    return(true);
}

#define t_disable_int(intno)  x_disable_int(intno)
#define i_disable_int(intno)  t_disable_int(intno)

/* 
 * (モデル上の)割り要求禁止フラグの解除
 *
 * 指定された，割込み番号の割込み要求禁止フラグのクリアして，割込みを
 * 許可する．また，（モデル上の）割込み要求禁止フラグを管理するidfの対
 * 応するビットををクリアする．
 * 割込み要求をマスクする機能をサポートしていない場合には，falseを返す
 */

Inline bool_t
x_enable_int(INTNO intno)
{
    uint32_t ipm_mask = ipm_mask_tbl[INDEX_IPM(ipm)];

    if ((bitpat_cfgint & INTNO_BITPAT(intno)) == 0U) {
        return(false);
    }
    idf &= ~INTNO_BITPAT(intno);

    /* diable all the interrupt */
    at91skyeye_disable_int(~0U);    
    /* only enable the interrupt that is not masked out */
    at91skyeye_enable_int(~(ipm_mask|idf));

    return(true);
}

#define t_enable_int(intno) x_enable_int(intno)
#define i_enable_int(intno) x_enable_int(intno)

/*
 * clear interrupt request
 */
Inline void
x_clear_int(INTNO intno)
{
    at91skyeye_clear_int(INTNO_BITPAT(intno));
}

#define t_clear_int(intno) x_clear_int(intno) 
#define i_clear_int(intno) x_clear_int(intno) 


/*
 *  probe interrupt
 */
Inline bool_t
x_probe_int(INTNO intno)
{
    return(at91skyeye_probe_int(INTNO_BITPAT(intno)));
}

#define t_probe_int(intno) x_probe_int(intno)
#define i_probe_int(intno) x_probe_int(intno)

/*
 *  config interrupt attribute
 *
 */
extern void    x_config_int(INTNO intno, ATR intatr, PRI intpri);

/*
 *  the necessory IRC processing before interrupt handled is called.
 *
 *  for AT91SAM7S, nothing to do
 */
Inline void
i_begin_int(INTNO intno)
{
    
}

/*
 *  the necessory IRC processing after interrupt handled is called.
 *
 *  for AT91SAM7S, nothing to do
 */
Inline void
i_end_int(INTNO intno)
{
    
}

/*
 *  target dependent system initialization
 */
extern void target_initialize(void);

/*
 *  target dependent exit processing.
 *
 *  called when the system exits.
 */
extern void target_exit(void) NoReturn;

/*
 *  interrupt handler (in chip_support.S)
 */
extern void interrupt_handler(void);

/*
 *  default interrupt handler
 */
extern void default_int_handler(void);

#ifdef TOPPERS_ENABLE_GCOV_PART
/*
 *  library functions for GCOV
 */
/*
 *  GCOV initialize
 */
extern void gcov_init(void);

/*
 *  GCOV pause
 */
extern void gcov_pause(void);

/*
 * GCOV resume
 */
extern void gcov_resume(void);

/*
 *  GCOV dump
 */
extern void gcov_dump(void);
#endif /* TOPPERS_ENABLE_GCOV_PART */

#endif /* TOPPERS_MACRO_ONLY */

/*
 *  core dependent module (for ARM)
 */
#include "arm_gcc/common/core_config.h"

#endif /* TOPPERS_TARGET_CONFIG_H */
